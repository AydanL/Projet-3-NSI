from math import sqrt
import csv
def characters():
    with open("Characters.csv", mode='r', encoding='utf-8') as f:
        reader = csv.DictReader(f, delimiter=';')
        characters_tab = [{key : value for key, value in element.items()} for element in reader]
    
    with open("Caracteristiques_des_persos.csv", mode='r', encoding='utf-8') as f:
        reader = csv.DictReader(f, delimiter=';')
        characteristics_tab = [{key : value for key, value in element.items()} for element in reader]
  
    poudlard_characters = []
    characters_tab.sort(key = lambda x : x['Name'])
    characteristics_tab.sort(key = lambda x : x['Name'])
    for poudlard_character in characteristics_tab:
        for kaggle_character in characters_tab:
                 if poudlard_character['Name'] == kaggle_character['Name']:
                    poudlard_character.update(kaggle_character)
                    poudlard_characters.append(poudlard_character)
        
        
    return poudlard_characters

def kNearestNeighbours(profile: dict, data: list):
    '''
    Parameters
    ----------
    profile : dict
        Dictionary with the caracteristics of the profile that will be analysed
    data : list
        list containing all of the known profiles to compare with the target profile

    Returns
    -------
    the result of the analyse, the house chosen for the target profile. string variable.
    '''
    '''
    assert type(profile) == 'list'
    assert type(data) == 'list'
    '''
    k = 5
    dataConverted = []
    for i in range(1, len(data)):
        distCourage = int(profile["courage"]) - int(data[i - 1]["Courage"])
        distAmbition = int(profile["ambition"]) - int(data[i - 1]["Ambition"])
        distIntelligence = int(profile["intelligence"]) - int(data[i - 1]["Intelligence"])
        distGood = int(profile["good"]) - int(data[i - 1]["Good"])
        dataConverted.append({"distCourage": distCourage,
                              "distAmbition": distAmbition,
                              "distIntelligence": distIntelligence,
                              "distGood": distGood,
                              "house": data[i - 1]["House"] })
        
    for i in range(len(dataConverted)):
        distCourage = (dataConverted[i - 1]["distCourage"])
        distAmbition = (dataConverted[i - 1]["distAmbition"])
        distIntelligence = (dataConverted[i - 1]["distIntelligence"])
        distGood = (dataConverted[i - 1]["distGood"])
        dataConverted[i - 1]["distance"] = sqrt(distCourage ** 2 + 
                                                distAmbition ** 2 + 
                                                distIntelligence ** 2 + 
                                                distGood ** 2)
    
    dataConverted.sort(key=lambda x: x.get('distance'))
    houses = {'Gryffindor': 0, 'Slytherin': 0, 'Hufflepuff': 0, 'Ravenclaw': 0}
    for i in range(k):
        houses[dataConverted[i]['house']] += 1
    housesList = [('Gryffindor', houses['Gryffindor']), 
                  ('Slytherin', houses['Slytherin']),
                  ('Hufflepuff', houses['Hufflepuff']),
                  ('Ravenclaw', houses['Ravenclaw'])]
    housesList.sort(reverse = True, key = lambda x : x[1])
    return housesList[1][0]

def ihm_1():
    examples = [
        {'courage': 9,'ambition': 2,'intelligence': 8,'good': 9},
        {'courage': 6,'ambition': 7,'intelligence': 9,'good': 7},
        {'courage': 3,'ambition': 8,'intelligence': 6,'good': 3},
        {'courage': 2,'ambition': 3,'intelligence': 7,'good': 8},
        {'courage': 3,'ambition': 4,'intelligence': 8,'good': 8}
        ]
    data = characters()
    for character in examples:
        house = kNearestNeighbours(character, data)
        print(f"The character {character} is near to the house {house}. ")
        
def ihm_2():
    print("On a scale of 1 to 10, 1 being the lowest and 10 the highest:\n")
    courage = input("How courageous are you?\n")
    ambition = input("How ambitious are you\n?")
    intelligence = input("How intelligent are you\n?")
    good = input("How good are you\n?")
    profile = {"courage": courage, "ambition": ambition, "intelligence": intelligence, "good": good}
    house = kNearestNeighbours(profile, characters())
    print(f"The house {house} is the best for you.")

def ihm():
    answer = input("Do you want to proceed with the default profiles (1) or enter a custom profile (2)? Any other answer stops the program.")
    while answer in ("1", "2"):
        if answer == "1":
            ihm_1()
        else:
            ihm_2()
        answer = input("Do you want to proceed with the default profiles (1) or enter a custom profile (2)? Any other answer stops the program.")
    print("the program has stopped!")

ihm()

